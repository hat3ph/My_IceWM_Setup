#!/usr/teradyne/sst/bin/perl5 -w

########################################################################
# Set-up NIS for both user and tester computer.
# This script is supposed to be run by root on User computer Only.
#
# User computer NIS options:  [ Master server | Slave Server | Client ]
# Tester computer NIS option: [ Client ]
#
# Tester computer is always configured as NIS client of either
# User computer (if User computer is Master or Slave server) or 
# Client of User compuer's NIS server(if User computer is a NIS client). 
########################################################################

# Revision History:
# 18-May-2004 Mihir Tunga - Re-write to a great extent.. this script now
#                       does the NIS setup for both user computer and 
#                       tester computer with a single run on user computer.
# 3/8/2004 - C.Villar - Added configure_tester routine & remove dependency 
#                       on ypinit
# date? - J.Natowitz - Created.


$DEBUG = 0; #debug flag ... set to 1 for turning on the debug msg

################################################################
# Key Global variables 
#
################################################################
$domain = ""; # domain name of the network to which user & tester computer belongs to
%nis_type = (
   'm' => "NIS Master Server",
   'M' => "NIS Master Server",
   's' => "NIS Slave Server",
   'S' => "NIS Slave Server",
   'c' => "NIS Client",
   'C' => "NIS Client",
);
$yproot_dir = "/var/yp";
$hosts_file = "/etc/hosts"; 
$run_level = ""; # user run-level when this script is executed 

# The Bourne shell init script that will run on run level 3
# to complete the pending NIS map transfers 

$level3_init_script = "/etc/rc3.d/S00rc_map_xfer.Teradyne";
$rpc_cmd = "/etc/init.d/rpc"; # for starting/stopping NIS
############## User computer related ############################
$user_host = "";
$user_ip   = "";

$user_nis_type   = "";  # [m|s|c]

$user_nis_master = "";
$user_nis_master_ip = "";

# NIS servers for User computer 
$user_nis_servers_count = 0;
@user_nis_servers=();
@user_nis_servers_ip=();

############# Tester computer related #######################
$tester_host = "";
$tester_ip   = "";
$tester_root_dir = "";

$tester_nis_type   = "";  # 'c' always client 

# Tester computer is always a NIS Client
$tester_nis_servers_count = 0;
@tester_nis_servers=();
@tester_nis_servers_ip=();

################################################################
# Exit -  failure with stat = 1.
################################################################
sub exit_fail {
        printf "\n$0 : Unsuccessful ...\n";
        exit (1);
}
################################################################
# Exit -  Success with stat = 0.
################################################################
sub exit_success {
        printf "\n$0 : Successful.\nYou do NOT have to run this script on tester computer.\n";
        exit (0);
}
################################################################
# Re-starts NIS service if run-level is 3 or more.
# Returns 1 for success 0 otherwise.
################################################################
sub restart_NIS {
   my ($discard_msg) = @_; # 1 if you want to discard msg

   # redirect cmd output to /dev/null if requested
   my ($redirect_out) = ""; 
   $redirect_out = "> /dev/null 2>&1"  if ( $discard_msg ) ;
     
       
   # if user run-level >= 3 (i.e. network resources are exported) then 
   # restart NIS service
    if ( ($run_level ne 'S') and ($run_level >= 3 )) {
         # Restarting rpcbind is required if the host name is changed
         # which is possible if configure_nis is called from change_sys_name
         # I am doing it here all the time just to be safe.

         # Let the user know what u are doing
         printf "\nRe-starting NIS service . please wait ...\n";

         # Stop running(if any) NIS service 
         (!system("$rpc_cmd stop $redirect_out")) or 
              die "Failed $rpc_cmd stop";
         (!system("/usr/lib/netsvc/yp/ypstop $redirect_out")) or 
              die "Failed /usr/lib/netsvc/yp/ypstop";
    
        # Now start NIS service 
        (!system("$rpc_cmd start $redirect_out")) or 
               die "Failed $rpc_cmd start";
     
        #check for ypbind to confirm that NIS service has been started
        if(`/usr/bin/ps -e -o "fname"` =~ /\bypbind\b/ ) {
            return (1); #success
        } else {
            return (0); #failure
        }
    }

    return (0); # fail
}
################################################################
# valid_ip():
# Validates IP address 
# Returns 1 : for valid ip and 
#         0 : for invalid ip.
# calling syntax: $ret = &valid_ip($ip);
################################################################
sub valid_ip {
 my ($ip) = @_;

   # check a.b.c.d format
   if ( !(  $ip =~ /(^|\s+)(\d+)\.(\d+)\.(\d+)\.(\d+)(\s+|$)/ )) {
      return (0); #invalid ip
   } 

   if ( (($2 > 0) and ($2 != 127) and ( $2 < 240) ) # 1st octet 1-239 except 127
       and (($3 >= 0) and ($3 < 255))               # 2nd octet 0-254
       and (($4 >= 0) and ($4 < 255))               # 3nd octet 0-254
       and (($5 >= 0) and ($5 < 255))               # 4nd octet 0-254
      ) {
         return (1); # valid ip
   } else {
         return (0); #invalid ip
   }
}

################################################################
# host_to_ip():
# Get the first found IP address for a given host from $hostsfile 
# Returns "" if no matching IP found .
# calling syntax: $ret_ip = host_to_ip ($hostname,$hostsfile);
################################################################

sub host_to_ip {
   my ($host,$hosts_f) = @_;

   open (FH,$hosts_f) or die "Can't open $hosts_f: $!\n";

   my $ip = ""; # the IP to return

   LINE: while (<FH>) {
             next LINE if (/^#/);    # skip comments
             next LINE if (/^\s*(#|$)/); # skip blank lines
             chomp();

             # get the IP entry for the host
             if (/(\s+$host\s+)/ || /(\s+$host$)/) {
                 ($ip) =split();
          
                 # check validity of the IP entry
                 if ( ! &valid_ip($ip) ) {
                    print "$hosts_f contains bad entry ! '$_' \n";
                    $ip = "";
                 }
                 last LINE; # quit at the fist entry found.
              }
   }
   close (FH);
   return $ip;
}

################################################################
# setup_tester_nis():
# Set the NIS info for Tester based on the user computers NIS setup. 
# Tester is ALWAYS a NIS client.
# If user computer is NIS Master or Slave server, then NIS server 
# for tester is the user computer.
# If user computer is NIS Client, then then NIS server(s) for 
# tester are  the same as that of user computer.
#
# sets up 
# 1. tester host name ($tester_host) and ip ($tester_ip) and $tester_root_dir
# 2. NIS servers for tester
################################################################

sub setup_tester_nis {
  # Get the tester name from the root export
  chomp ($tester_host=`ls -1 /export/root | egrep -v "templates|clone"`);
  ($tester_host) or die "Can't identify tester host name .. Exiting ...\n";
  
  # Set the tester root dir
  $tester_root_dir = "/export/root/$tester_host";
  
  #tester ip
  # look in to tester comp's /etc/hosts
  $tester_ip  = host_to_ip($tester_host,$tester_root_dir.$hosts_file); 

  #tester NIS Type 
  $tester_nis_type   = 'c'; # Always NIS client

  if (($user_nis_type eq 'm') or 
      (($user_nis_type eq 's') and ($user_nis_servers_count == 0 )) )  {
     $tester_nis_servers[0]= $user_host;
     $tester_nis_servers_ip[0]= $user_ip;
     $tester_nis_servers_count = 1;
  } else {
     $tester_nis_servers_count = $user_nis_servers_count;
     @tester_nis_servers = @user_nis_servers;
     @tester_nis_servers_ip = @user_nis_servers_ip;
  }
    
}

################################################################
# transfer_maps_from_master()
# Transfers maps from the NIS master to the NIS slave if run-level 
# is 3 or more otherwise, sets up the /etc/rc3.d/S00rc_map_transfer.Teradyne 
# script to initiate the map transfers on entry to run-level 3.
################################################################
sub transfer_maps_from_master {
    
    my ($transfer_now,$stat) = 0;
    my ($orig_binding_file);
    # ------------------
    # if user run-level >= 3 (i.e. network resources are exported) then 
    #    1. make this slave server binds to the master server.
    #    2. then transfer all maps from the master server to  here.
    # else 
    #    sets up the /etc/rc3.d/S00rc_map_transfer.Teradyne script to initiate
    #    the map transfers on entry to run-level 3.
    # ------------------
    
    if ( -e $binding_file ) {
        # save the original binding (ypservers) file.
        $orig_binding_file = "$binding_file.Ter";
        (!system("mv $binding_file  $orig_binding_file") ) or 
                die "Can't move $binding_file  $orig_binding_file : $!\n";
    } else {
      $orig_binding_file = "";
    }   

    # Create a temp binding file with just the NIS master's name in it
    # so that this server binds to NIS master on NIS restart for map transfer.
       
    (!system("echo $user_nis_master > $binding_file") ) or 
              die "Can't write to $binding_file : $!\n";

    #by default postpone map transfer to next reboot
    $transfer_now = 0; #postpone map transfer to next reboot
    
    # we will try the map transfer now if possible
    if ( ($run_level ne 'S') and ($run_level >= 3) ) {

        #Re-start NIS service
        $stat = &restart_NIS(1) ; # discard the msgs
        
        # postpone map transfer if NIS failed to startup 
        if ( $stat == 0 ) {  # NIS startup failed
            $transfer_now = 0; #postpone map transfer to next reboot
        } else {
            $transfer_now = 1; # do it now.
        }
    }
 
    # Transfering maps now ?
    if ( $transfer_now == 1 ) { 
        if ($DEBUG) {
            $_ = `ypwhich`;
            chomp($_);
            printf "DEBUG:  Bound to $_ \n" ;
        }
    
        # get the name of the maps from the master server
        $_ = `ypwhich -m`; # maps of all NIS servers - \n separating each entry
        
        # just the map names for this master
        # s/^(\S+)\s+(\b$user_nis_master$)/$1/gm;

        # All map names available with this master
        s/^(\S+)\s+(\b\S+$)/$1/gm; # for any map
        @maps = split("\n"); # name of the maps
        
        # Transfer the maps ...
        printf "\nTransfering NIS maps(%d nos) from Master Server $user_nis_master...\n", scalar(@maps);

        foreach my $map (@maps){
          printf "\nTransfering map $map ...";
          if (system("/usr/lib/netsvc/yp/ypxfr -h $user_nis_master -c -d $domain -f $map > /dev/null 2>&1")) {
             printf ":Failed !"; 
          } else {
             printf ":Successfull";
          }
        }
        printf "\nNIS map transfers(%d nos) done ... \n", scalar(@maps);


      # Remove the temp binding file and 
      # Restore the original binding file and 
      # Restart the NIS service again

      (!system("rm -f $binding_file") ) or 
                die "Can't remove temp $binding_file : $!\n";

      if ($orig_binding_file ne "" ) {
          (!system("mv $orig_binding_file $binding_file  ") ) or 
                    die "Can't move $orig_binding_file to $binding_file : $!\n";

          # Re-start NIS
          &restart_NIS(0); # do not discard the nis start msgs
      }

    } else {

     # run-level < 3 ... postpone map transfers till user enters run-level 3 
     # set up a rc3.d script to do the map transfers
    
     #------------------------
     # create a Bourne shell init script that will run on run level 3
     # to complete the pending NIS map transfers and delete itself
     #------------------------
     my $script_file = $level3_init_script;

     open (SCRIPT, ">$script_file") or die "Can't create  $script_file : $!\n";

     printf SCRIPT "%s\n\n", '#! /bin/sh -';
     printf SCRIPT "%s\n\n", 'PATH=/usr/bin:/bin:/usr/sbin:/usr/ucb';

     printf SCRIPT "%s=%s\n", 'DEBUG', "$DEBUG";
     printf SCRIPT "%s\n", 'domain=`domainname`';
     printf SCRIPT "%s=%s\n",'nis_master', "$user_nis_master" ;
     printf SCRIPT "%s=%s\n",'binding_file', "$binding_file" ;

     if ( $orig_binding_file ) {
         printf SCRIPT "%s=%s\n",'orig_binding_file', "$orig_binding_file" ;
     } else {
         printf SCRIPT "%s=%s\n",'orig_binding_file', "_NOT_PRESENT_" ;
     }

 #------------------------
 # These below lines till CODE_SEG gets directly appended to the 
 # Bourne Shell script. So be careful about ';'and new lines as 
 # they are important for Bourne Shell script
 #------------------------

 printf SCRIPT << 'CODE_SEG';

if [ "$DEBUG" != "0" ]; then
	echo "DEBUG : Domain=$domain"
	echo "DEBUG : Master server=$nis_master : Current NIS server=`ypwhich`"
	echo "DEBUG : binding file=$binding_file "
	echo "DEBUG : orignal binding file=$orig_binding_file "
fi

if [ "${domain}" = "" ]; then
	echo "Domain not set. Can't transfer NIS maps"
	exit 1
fi

if [ "${nis_master}" = "" ]; then
	echo "NIS Master Server not set. Can't transfer NIS maps"
	exit 1
fi

echo "Transfering NIS maps from Master Server $nis_master ..."
for map  in `ypwhich -m | cut -d" " -f1` ;  do
	echo "Transfering map: $map :\c"; 
        /usr/lib/netsvc/yp/ypxfr -h $nis_master -c -d $domain -f $map > /dev/null 2>&1;
	if [ $? -eq 0 ] ; then
		echo "Successful"
	else
		echo "Failed"
	fi
done
echo "NIS map transfers done"

# Do the clean up
#rename this script in /etc/rc3.d so that it is nologer active 
#but keep it for debugging purpose
mv $0 /etc/rc3.d/nis_map_xfr.tmp

#remove the current binding file as it was just made to bind with the master
rm -f $binding_file

#Restore the original binding file (if any)
if [ $orig_binding_file != '_NOT_PRESENT_' -a -f $orig_binding_file ] ; then
	mv $orig_binding_file $binding_file
fi

#Restart NIS service 
/usr/lib/netsvc/yp/ypstop
/usr/lib/netsvc/yp/ypstart
exit 0
#
#
CODE_SEG
 
    close (SCRIPT);

    printf "\n\n---------------------------------";
    printf "\nCurrent run level is $run_level";
    printf "\nNIS maps are NOT transfered from Master Server($user_nis_master) now" ;
    printf "\nIt requires a minimum run level of 3.";
    printf "\nNIS maps are scheduled for transfer from Master Server($user_nis_master)";
    printf "\non entering user run level 3.";
    printf "\n---------------------------------\n\n";
    }

    printf "\nDEBUG:The user computer '$user_host' has been setup successfully as NIS Slave Server." if ($DEBUG);
    printf "\nDEBUG:The user computer will come up as a NIS Slave server on reboot." if ($DEBUG);
}

################################################################
# configure_tester:
# Gets the name of the tester computer and sets up the tester
# as a NIS client. There is no other option.
################################################################

sub configure_tester_client {

   printf "\nSetting up tester computer as a NIS client ... ";
   (!system("cp $def_domain_file  $tester_root_dir$def_domain_file")) or 
          die "Can't copy $def_domain_file to $tester_root_dir$def_domain_file";
   (!system("cp $alias_file $tester_root_dir$alias_file")) or 
          die "Can't copy $alias_file to $tester_root_dir$alias_file";

   #------
   # create binding dir 
   #------
 
   (!system("rm -rf $tester_root_dir$yproot_dir/binding/*")) or 
             die "Can't clean up $tester_root_dir$yproot_dir/binding dir";
   mkdir ("$tester_root_dir$binding_dir",0755) or 
             die "Can't create $tester_root_dir$binding_dir: $!\n";

   if ( $tester_nis_servers_count > 0 ) {
       (!system("touch $tester_root_dir$binding_file")) or 
             die "Can't touch $tester_root_dir$binding_file";
    
       for ( my $ser =0; $ser < $tester_nis_servers_count; $ser++ ) {
           if ( !host_to_ip($tester_nis_servers[$ser],$tester_root_dir.$hosts_file) ) {
               printf "\nDEBUG : Adding $tester_nis_servers[$ser] not found in $tester_root_dir$hosts_file" if ($DEBUG) ;
               (!system ("echo $tester_nis_servers_ip[$ser]  $tester_nis_servers[$ser] >> $tester_root_dir$hosts_file")) or 
                     die "Can't append to $tester_root_dir$hosts_file";
           }
            printf "\nDEBUG : Adding $tester_nis_servers[$ser] $tester_root_dir$binding_file" if ($DEBUG);
           (!system("echo $tester_nis_servers[$ser] >> $tester_root_dir$binding_file")) or 
                 die "Can't append to $tester_root_dir$binding_file";
       }
   }

   # Use the NIS
   (!system("cp $tester_root_dir/etc/nsswitch.nis.new $tester_root_dir/etc/nsswitch.conf")) or 
       die "Can't copy $tester_root_dir/etc/nsswitch.nis.new to /etc/nsswitch.conf";
   printf "\nThe tester '$tester_host' has been setup successfully as NIS Client.";

}


#
################################################################
##prompt user for [y/n y] answer
#Default answer passed in as a parameter.
################################################################

sub get_ans {

    my $ans="";
    my $once=0;
    while (! ($ans eq "y" | $ans eq "n")) {
    if ($once == 0) {
        print STDOUT "\[y/n $_[0]\] ";
    }   #prompt user for answer.
    else {
        print STDOUT "Invalid entry. Please enter 'y', 'n' or <CR> for default. \[y/n $_[0]\]";
             #If invalid, keep prompting.
    }
    chop ($ans=<STDIN>);
    if ($ans eq "") {                     #If no answer given
        $ans=$_[0];                       #accept default.
    }
    $once=1;
    }
    return $ans;
}


################################################################
# MAIN -  Main - main  Program starts here
################################################################

# ----------------------------------
# check for super user privilege before going forward !
# ----------------------------------
{ 
  my $who = `/usr/ucb/whoami`;
  chomp($who);
  if ( $who ne 'root' ) {
     print "\nYou need Super user privilege to run this script.";
     print "\nPlease login as root and try again.\n";
     &exit_fail(); # failed
  }
} # end of root privilege

# ----------------------------------
# check for host's (user computer) name if it is set
# ----------------------------------
{
  $user_host = `uname -n`;
  chomp($user_host);
  unless ( $user_host =~ /\w+/) {
     print "\nThe local host's name hasn't been set.";
     print "\nPlease set it and try again.\n";
     &exit_fail(); # failed
  } 
  $user_ip = host_to_ip($user_host,$hosts_file);
} # end of host name check block


# ----------------------------------
# check existance of yp root dir 
# ----------------------------------
unless ( -d $yproot_dir ) {
  print "\nThe directory $yproot_dir doesn't exist.";
  print "\nRestore it from the distribution.";
  &exit_fail();
}

# ----------------------------------
# Prevent this script getting run on tester computer.
# Because we are going to do NIS set-up for both user and tester 
# computer from here. 
# ----------------------------------

unless ( -d '/export/root' ) {
   print "\nThis script is supposed to be run on user computer only !\n";
   &exit_fail(); # failed
}

# ----------------------------------
# Print general info about this script .
# ----------------------------------
printf "\nThis script sets up NIS service for the user computer and tester computer.";
printf "\nYou do NOT have to run this script on tester computer.";
printf "\nUser computer may be configured as NIS Master server or Slave server or Client.";
printf "\nTester computer is always configured as NIS client.\n\n";

# ----------------------------------
# Get the user computer NIS setup choice from user.
# ----------------------------------

printf "\nPlease choose the type of NIS service for the user computer:";
printf "\n M)aster server"; 
printf "\n S)lave server"; 
printf "\n C)lient\n";

$invalid_entry = 1;

while ($invalid_entry) {
	printf "\nPlease enter M, S, or C: ";
	chop($user_nis_type = <STDIN>);
	$user_nis_type =~ tr/A-Z/a-z/;    # translate to lower case
	$invalid_entry = (($user_nis_type ne 'm') and 
                          ($user_nis_type ne 's') and 
                          ($user_nis_type ne 'c')); 
   
}

# ----------------------------------
# check  run-level. 
# Should be atleast 3 for NIS slave server setup(transfering maps from 
# Master to Slave). if the run level is < 3 then map transfers are 
# postponed till user enters run level 3.
# A init script is created and placed in /etc/rc3.d/ to do the map transfers.
# That init script will do the map transfers and then deactivate itself.
# ----------------------------------
{ 
  my ($tmp1,$tmp2);
  $_ = `who -r`;
  ($tmp1,$tmp2,$run_level) = split();
  $run_level =~ tr/a-z/A-Z/; # convert to uppercase
 
} # end of  runlevel

# ----------------------------------
# get the domain name
# ----------------------------------

$answer = 'n';

while ($answer ne 'y') {
    printf "\nWhat will be the name of the domain: ";
    chop($_=<STDIN>);
    ($domain) = split();  # accept the 1st word only
    if ($domain) {
       printf "\nIs '$domain' correct?";
       $answer = &get_ans("y");
    }
}


# ----------------------------------
# For Slave server  , get the name and IP of the Master server 
# ----------------------------------

if ( $user_nis_type eq 's')  {

    $answer = 'n';
    
   GET_MASTER:
    while ($answer ne 'y') {
      printf "\nEnter the name of the NIS Master Server for '$domain' domain: ";
         chop($_=<STDIN>);
         ($user_nis_master) = split();  # accept the 1st word only
         if ( $user_nis_master ) { 
             # Master can't be same as this host (Slave)
             if ( $user_host eq $user_nis_master ) {
                 printf "\nThe host specified should be a running Master NIS server, not this machine...";
                 next GET_MASTER;
             }
             
             # look Master's IP in /etc/hosts and confirm it.
             $user_nis_master_ip =  host_to_ip($user_nis_master,$hosts_file);
             while ( !$user_nis_master_ip ) { # no entry found; get it from user
                 printf "\nWhat the IP address of '$user_nis_master' ? ";
                 chop($_=<STDIN>);
                 ($user_nis_master_ip) = split();  # accept the 1st word only

                 next unless ($user_nis_master_ip); # skip blank input

                 #validate IP entered by user
                 if ( ! &valid_ip($user_nis_master_ip) ) {
                    printf "\n$user_nis_master_ip does not seem to be a valid IP address.";
                    $user_nis_master_ip = "";
                 }
             }
             printf "\nYou have entered the following NIS Master server information for '$domain' domain";
             printf "\nHost name: $user_nis_master       IP address: $user_nis_master_ip";
             printf "\nAre they correct ?";
             $answer = &get_ans("y");
             if ($answer eq 'n') {
                printf "\nLet's try the whole thing again...";
             }
         }
   }

   # Check if NIS Master is alive.
   if ( ($run_level ne 'S') and ($run_level >= 3) )
   {
     my $ping_timeout = 1;
     unless (`/usr/sbin/ping $user_nis_master_ip $ping_timeout 2> /dev/null` =~ /\s+alive$/ ) {
        printf "\nNIS Master server '$user_nis_master' IP: $user_nis_master_ip is NOT responding";
        printf "\nping input ... NIS Slave server setup can not be completed..."; 
        printf "\nPlease check the network cable connection and the status of NIS Master server ";
        printf "\n'$user_nis_master' and try again ...";
        
        &exit_fail(); # failed
     } 
    
   }
}


# ----------------------------------
# For Client or Slave Server get the NIS servers name from user
# For Master and Slave NIS server is the host itself.
# save NIS servers list in  @user_nis_servers 
# ultimately this will get into /var/yp/binding/<domain>/ypservers
# ----------------------------------

if (($user_nis_type eq 'c') or ($user_nis_type eq 's')) {
    printf "\nYou have selected User computer '$user_host' to be a $nis_type{$user_nis_type}";
    printf "\nIn order for NIS to operate sucessfully, we have to construct a";
    printf "\nlist of the NIS servers.  Please continue to add the names of ";
    printf "\nNIS servers in order of preference, one per line.  When you are";
    printf "\ndone with the list,type a <control-d> or a <CR> on a line by itself.";
    printf "\n\nBroadcast will be used if no NIS servers are specified.";
    printf "\n";

   $user_nis_servers_count = 0;

  GET_NIS_SERVER:
   while () {

       my $server ="";
       my $server_ip ="";

       printf "\nNext NIS server to add: ";
       $_=<STDIN>; #get the user input
       $_ = "" unless ($_); # take care of Ctrl-d
       ($server) = split();  # accept the 1st word only
       if ($server) {
          # check for duplicate entry
          for ( my $i =0; $i < $user_nis_servers_count; $i++ ) {
             if ( $server eq $user_nis_servers[$i] ) {
                printf "\nDuplicate entry: $user_nis_servers[$i] ($user_nis_servers_ip[$i]) : skipped!";
                next GET_NIS_SERVER; # duplicate - skip
             }
          }
          
          # not a duplicate - get ip 
          $server_ip = host_to_ip($server,$hosts_file);
          while ( !$server_ip ) {
             printf "\nWhat is the IP address for '$server'? ";
             chop($_=<STDIN>);
             ($server_ip) = split();  # accept the 1st word only
             # check validity of the IP entry
             if ( ! &valid_ip($server_ip)) {
                 printf "\n$server_ip does not look like a valid IP address!";
                 $server_ip = "";
             }
          }
          printf "\nNIS server to add : $server ($server_ip)";
          printf "\nIs this correct ?";
          $answer = &get_ans("y");
          if ( $answer eq 'y') { 
             # save the NIS server info
             $user_nis_servers[$user_nis_servers_count] = $server;
             $user_nis_servers_ip[$user_nis_servers_count] = $server_ip;
             $user_nis_servers_count++; # increment the NIS servers count 
          }
       } else {
          print "\nAre you done adding NIS servers?";
          $answer = &get_ans("y");
          if ( $answer eq 'y') {
             if ($user_nis_servers_count eq 0 ) {
                 printf "\nNo NIS servers are added for the host '$user_host'.";
                 printf "\nBroadcast will be used to find NIS server...";
             }
             last;   # end of NIS server addition.
          }
       }
       
   }
} else { # Master 
  $user_nis_servers_count = 0;
  $user_nis_servers[$user_nis_servers_count] = $user_host;
  $user_nis_servers_ip[$user_nis_servers_count] =  host_to_ip($user_host,$hosts_file);
  $user_nis_servers_count++;
 
}

# ----------------------------------
# Info for user - in  NIS  Master Server configuration
# ----------------------------------
if ($user_nis_type eq 'm') {
    printf "\nYou have selected User computer '$user_host' to be NIS Master of '$domain' domain.";
    printf "\nNIS  maps of Master server are built from the NIS map source";
    printf "\nfiles based on logic in /var/yp/Makefile with target ";
    printf "\n'all NOPUSH=1'. Normally, NIS map source files are in /etc.";
    printf "\nHowever, they can be kept in any other location also. ";
    printf "\nYou may also add new map source files.";
    printf "\nIf you have changed the default location of the map source files";    printf "\nor added new map files, please update the /var/yp/Makefile to ";
    printf "\nreflect those changes.";
    printf "\n";
    printf "\nPlease verify the content of map source files(e.g. hosts,passwd,";    printf "\ngroups etc.) and the /var/yp/Makefile before continuing forward.";
    printf "\n";

    printf "\nAre you ready with your NIS map source files and var/yp/Makefile? ";

    $answer = &get_ans("y");
    if ( $answer eq 'n') {
         printf "\nPlease make necessary changes to the NIS map source files ";
         printf "\nand /var/yp/Makefile and run $0 later ...";
         &exit_fail(); #failed
    }

}


# ----------------------------------
# Setup tester NIS configuration based on user computers NIS setup ...
# ----------------------------------
&setup_tester_nis();

# ----------------------------------
# Setup the global vars 
# ----------------------------------
$def_domain_file = "/etc/defaultdomain";
$domain_dir      = "$yproot_dir/$domain";
$binding_dir     = "$yproot_dir/binding/$domain";
$binding_file    = "$yproot_dir/binding/$domain/ypservers";
$alias_file      = "$yproot_dir/aliases";

# ----------------------------------
# End of Interactive session...
# Present the consolidated setup info before proceeding... 
# ----------------------------------

printf "\n\nSummary of the NIS setup request that we gathered so far.";
printf "\n\nNIS Domain : $domain";

# ----------------------------------
# User computer Setup info displayed to user
# ----------------------------------

printf "\n\n---- User computer NIS Setup -----";
printf "\n\tHost name : $user_host";
printf "\n\tHost IP   : $user_ip";
printf "\n\tNIS configuration : $nis_type{$user_nis_type}"; # [Master Server | Slave Server | Client]

# NIS Master server host/ip details for slave configuration
if ($user_nis_type eq 's' ) {
    printf "\n\tMaster Server host name : $user_nis_master";
    printf "\n\tMaster Server host IP   : $user_nis_master_ip";
}

# NIS server(s) host/ip details for all configurations
   printf "\n\tList of NIS servers ... (Total $user_nis_servers_count)";
   for ( my $ser =0; $ser < $user_nis_servers_count; $ser++ ) {
       printf "\n\t\t$user_nis_servers_ip[$ser] $user_nis_servers[$ser]";
   }
   if ( $user_nis_servers_count eq 0 ) {
       printf "\n\t\tBroadcast method will be used to find NIS Server";
   }

#How NIS maps are going to be built msg for Master configuration
if ($user_nis_type eq 'm') {
  printf "\n\tMaster NIS maps  will be built according to /var/yp/Makefile";
  printf "\n\twith target 'all NOPUSH=1'"; 
}

# ----------------------------------
# Tester computer NIS setup info displayed to user
# ----------------------------------

printf "\n\n---- Tester computer NIS setup  -----";
printf "\n\tHost name : $tester_host";
printf "\n\tHost IP   : $tester_ip";
printf "\n\tNIS configuration : $nis_type{$tester_nis_type}"; # [Client]

# NIS server(s) host/ip details for slave or client configuration
printf "\n\tList of NIS servers ... (Total $tester_nis_servers_count)";
for ( my $ser =0; $ser < $tester_nis_servers_count; $ser++ ) {
    printf "\n\t\t$tester_nis_servers_ip[$ser] $tester_nis_servers[$ser]";
}
if ( $tester_nis_servers_count eq 0 ) {
    printf "\n\t\tBroadcast method will be used to find NIS Server";
}
printf "\n---- ---- ----- ----- ----- ----- -----";
printf "\n\nNo modification to your system has been done so far.";
printf "\nPlease verify the above setup information before continuing further.";
printf "\nDo you want to continue ?";

$answer = &get_ans("n"); # default - no
if ( $answer eq 'n') {
     printf "\nTry later ...";
     &exit_fail();
}

printf "\nStarting NIS Setup for User computer '$user_host' as '$nis_type{$user_nis_type}'";


#------
# Set Domain
#------
(!system("domainname $domain")) or die "Failed executing domainname $domain";
(!system("echo $domain > $def_domain_file")) or 
          die "Can't append to $def_domain_file";

#------
# add domainname and ypservers aliases to aliases file
#------
(!system("echo $domain $domain >> $alias_file")) or 
          die "Can't append to $alias_file";
$ypservers_map = `ypalias ypservers`;
(!system("echo ypservers $ypservers_map >> $alias_file")) or 
          die "Can't append to $alias_file";
(!system("sort $alias_file | uniq > /tmp/.ypaliases; mv /tmp/.ypaliases $alias_file")) or 
          die "Can't overwrite to $alias_file";


#------
#Remove the make time stamp files if any from the previous setups 
#------
system ("rm -f $yproot_dir/*.time");

#------
# Remove the domain dir if existing 
# This will be created for Master or Slave setup
#------

if ( -d $domain_dir ) {
    (!system ("rm -r -f $domain_dir")) or 
              die "Can't delete exiting $domain_dir: $!\n";
} 

#------
# create binding dir 
#------
 
(!system("rm -rf $yproot_dir/binding/*")) or 
          die "Can't clean up $yproot_dir/binding dir";

mkdir ($binding_dir, 0755) or die "Can't create $binding_dir: $!\n";


#------
#update the NIS servers in $binding_file
#------
printf "\nSetting up User computer '$user_host' as a $nis_type{$user_nis_type}";

if ( $user_nis_servers_count > 0 ) {
    if (not -e "$binding_file") {
         (!system("touch $binding_file")) or die "Can't touch $binding_file";
    }
    
    # Append  the NIS servers (host) to  $hosts_file and $binding_file  
    # if they are not present
    
    for ( my $ser =0; $ser < $user_nis_servers_count; $ser++ ) {
         if (!host_to_ip($user_nis_servers[$ser],$hosts_file)  ) {
           printf "\nDEBUG : Adding $user_nis_servers[$ser] not found in $hosts_file" if ($DEBUG);
           (!system ("echo $user_nis_servers_ip[$ser]  $user_nis_servers[$ser] >> $hosts_file")) or die "Can't append to $hosts_file";
         }
    
         printf "\nDEBUG : Adding $user_nis_servers[$ser] to $binding_file" if ($DEBUG);
         (!system("echo $user_nis_servers[$ser] >> $binding_file")) or 
                   die "Can't append to $binding_file";
    }
}

##############################
# Setup specific to Master Server
##############################

if ( $user_nis_type eq 'm' ) {

   (!system("cp /etc/nsswitch.files /etc/nsswitch.conf")) or 
             die "Can't cp /etc/nsswitch.files to /etc/nsswitch.conf";
   
   # Create a domain dir where maps will be stored
   mkdir ($domain_dir,0755) or die "Can't create $domain_dir: $!\n";;

   #Remove the make time stamp files so that all maps will be built fresh from the source
   (!system ("rm -f $yproot_dir/*.time")) or 
              die "Can't remove *.time files: $!\n";

   # write NIS servers to a temp file .. to be used for building ypservers map
   open (SFH,">/tmp/.ypservers") or die "Can't open /tmp/.ypservers: $!\n";
   for ( my $ser =0; $ser < $user_nis_servers_count; $ser++ ) {
       printf  SFH "$user_nis_servers[$ser]\n";
   }
   close(SFH);

   printf "\nBuilding $yproot_dir/$domain/ypservers...\n"; 

   # Build ypservers map
   (!system ("makedbm /tmp/.ypservers $yproot_dir/$domain/$ypservers_map") ) or
         die "Couldn't build NIS data base $yproot_dir/$domain/$ypservers_map.";

   # Go to /var/yp and run 'make all NOPUSH=1' to build the NIS maps 
   chdir "$yproot_dir" or die "Can't cd to $yproot_dir : $!\n";
   printf "\nRunning $yproot_dir/Makefile ...\n";
   (!system ("/usr/ccs/bin/make all NOPUSH=1") ) or 
              die "Error running Makefile ...";

    #   Now reset nsswitch file to use NIS
    (!system("cp /etc/nsswitch.nis.new /etc/nsswitch.conf")) or 
              die "Can't cp /etc/nsswitch.nis.new /etc/nsswitch.conf";

   # if user run-level >= 3 (i.e. network resources are exported) then 
   # restart NIS service
    &restart_NIS(0); # do not discard the nis start msgs

    printf "\nThe user computer '$user_host' has been successfully setup ";
    printf "\nas NIS Master Server for domain $domain on reboot.\n";

    ##################
    # complete the Tester computer NIS client setup
    ################
    &configure_tester_client();

    &exit_success(); # successfull

}

##################
# client or Slave
##################

# Use the NIS
(!system("cp /etc/nsswitch.nis.new /etc/nsswitch.conf")) or 
          die "Can't copy /etc/nsswitch.nis.new to /etc/nsswitch.conf";


#setup the tester computer as an NIS client
&configure_tester_client();

# For Client only
if ( $user_nis_type eq 'c') {

    printf "\nUser computer '$user_host' has been setup successfully as an NIS Client.";
    printf "\nUser computer and tester computer will come up as an NIS client on reboot.";
    &exit_success();   # successfull
}else { 

# Slave only 

    # Add NIS master to slave's hosts file
    if (!host_to_ip($user_nis_master,$hosts_file)  ) {
        printf "\nDEBUG : Adding $user_nis_master not found in $hosts_file" if ($DEBUG);
        (!system ("echo $user_nis_master_ip  $user_nis_master >> $hosts_file"))
                  or die "Can't append to $hosts_file";
    }

   # Create the domain dir where all maps will be stored
   mkdir ($domain_dir,0755) or die "Can't create $domain_dir: $!\n";;
    
   # Initiate the transfer of NIS maps from Master server to this Slave server
   &transfer_maps_from_master(); 

   printf "\nUser computer '$user_host' will come up as an NIS Slave Server on reboot.";
   printf "\nTester computer '$tester_host' will come up as an NIS client on reboot.";

   &exit_success();   # successfull

} # end of slave conf.


####################################
&exit_success(); # We are done ! 
####################################
